#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#

library(shiny)
library(shinydashboard)
library(deSolve)
library(coronavirus)
library(tidyverse)
library(lubridate)



ui <- dashboardPage(
    dashboardHeader(title = "Covid-19"),
    dashboardSidebar(
        sidebarMenu(
            menuItem(tabName = "SIR_model", text = "SIR Model", icon = icon("viruses")),
            menuItem(tabName = "simulation", text = "Simulation Outbreak", icon = icon("chart-area")),
            menuItem(tabName = "maps", text = "Map outbreak", icon = icon("map-marked-alt")) 
        ),
        br(),
        br(),
        selectInput(inputId = "country", label = "Country/Region", choices = unique(coronavirus$country), selected = "Colombia"),
        br(),
        textOutput("selected_country"),
        br(),
        actionButton(inputId = "run_SIR", label = "Run SIR!", icon = icon("viruses"))
        ),
    dashboardBody(
        tabItems(
            tabItem(tabName = "SIR_model",
                    fluidRow(
                        column(width = 12,
                               valueBox(textOutput("R0_box"), "Reproduction Number", icon = icon("user")),
                               valueBoxOutput("ask2"),
                               valueBoxOutput("ask3")
                               ),
                        column(width = 12,
                               valueBoxOutput("ask4"),
                               valueBoxOutput("ask5"),
                               valueBoxOutput("ask6")
                               )
                        ),
                    tabsetPanel(
                        tabPanel(title = "Fitted vs. Obs.",value = "tabPanel1",
                                 fluidRow(
                                     column(width = 6,
                                            plotOutput(outputId = "plot1")
                                            ),
                                     column(width = 6,
                                            plotOutput(outputId = "plot2")
                                            )
                                     )
                                 ),
                        tabPanel(title = "SIR model",value = "tabPanel2",
                                 fluidRow(
                                     column(width = 6,
                                            plotOutput(outputId = "plot3")
                                            ),
                                     column(width = 6,
                                            plotOutput(outputId = "plot4")
                                            )
                                     )
                                 )
                        )
                    )
        )
    )
)


server <- function(input, output) {

# data ----------------------------------------------------------------------------------------------------------------------

    data(coronavirus)
    population_data <- readxl::read_xls("www/API_SP.POP.TOTL_DS2_en_excel_v2_988396.xls")


# Methods -------------------------------------------------------------------------------------------------------------------

    population_country <- function(country) {
        return(population_data %>% filter(`Country Name` == country) %>% gather("year", "population", 5:64) %>% filter(!is.na(population)) %>% mutate(max_year = max(year)) %>% filter(year == max_year) %>% select(population) %>% {.[[1]]})
    }
    SIR <- function(time, state, parameters) {
        par <- as.list(c(state, parameters))
        with(par, {
            dS <- -beta * I * S / N
            dI <- beta * I * S / N - gamma * I
            dR <- gamma * I
            list(c(dS, dI, dR))
        })
    }
    RSS <- function(parameters) {
        names(parameters) <- c("beta", "gamma")
        out <- ode(y = init, times = Day, func = SIR, parms = parameters)
        fit <- out[, 3]
        sum((Infected - fit)^2)
    }
    


# Standar -------------------------------------------------------------------------------------------------------------------
    output$selected_country <- renderText(paste("you select: ", "'",input$country,"'"))
    # SIR model -----------------------------------------------------------------------------------------------------------------
    
    df <- coronavirus %>%
        filter(country == "Colombia") %>%
        group_by(date, type) %>%
        summarise(total = sum(cases, na.rm = TRUE)) %>%
        pivot_wider(
            names_from = type,
            values_from = total
        ) %>%
        arrange(date) %>%
        ungroup() %>%
        mutate(active = confirmed - death - recovered) %>%
        mutate(
            confirmed_cum = cumsum(confirmed),
            death_cum = cumsum(death),
            recovered_cum = cumsum(recovered),
            active_cum = cumsum(active)
        )
    sir_start_date <- df %>% filter(active_cum >= 1) %>% select(date) %>% summarise(date = min(date)) %>% {.[[1]]}
    sir_end_date <- df %>% filter(active_cum >= 1) %>% select(date) %>% summarise(date = max(date)) %>% {.[[1]]}
    
    Infected <- subset(df, date >= ymd(sir_start_date) & date <= ymd(sir_end_date))$active_cum
    Day <- 1:(length(Infected))
    
    N <- population_country("Colombia")
    init <- c(
        S = N - Infected[1],
        I = Infected[1],
        R = 0
    )
    
    Opt <- optim(c(0.5, 0.5),
                 RSS,
                 method = "L-BFGS-B",
                 lower = c(0, 0),
                 upper = c(1, 1)
    )
    
    Opt$message
    
    Opt_par <- setNames(Opt$par, c("beta", "gamma"))
    Opt_par
    
        # Predict -------------------------------------------------------------------------------------------------------------------
    
    t <- 1:as.integer(ymd(sir_end_date) + 1 - ymd(sir_start_date))
    fitted_cumulative_incidence <- data.frame(ode(
        y = init, times = t,
        func = SIR, parms = Opt_par
    ))
    fitted_cumulative_incidence <- fitted_cumulative_incidence %>%
        mutate(
            Date = ymd(sir_start_date) + days(t - 1),
            Country = "Colombia",
            cumulative_incident_cases = Infected
        )
    
        # Reproduction number  ------------------------------------------------------------------------------------------------------
    
    Opt_par
    R0 <- as.numeric(Opt_par[1] / Opt_par[2])
    R0
    
        # Using our model to analyze the outbreak if there was no intervention ------------------------------------------------------
    
    # time in days for predictions
    t <- 1:400
    
    # get the fitted values from our SIR model
    fitted_cumulative_incidence <- data.frame(ode(
        y = init, times = t,
        func = SIR, parms = Opt_par
    ))
    
    # add a Date column and join the observed incidence data
    fitted_cumulative_incidence <- fitted_cumulative_incidence %>%
        mutate(
            Date = ymd(sir_start_date) + days(t - 1),
            Country = "Colombia",
            cumulative_incident_cases = c(Infected, rep(NA, length(t) - length(Infected)))
        )
    
    
    
        # More summary statistics ---------------------------------------------------------------------------------------------------
    
    fit <- fitted_cumulative_incidence
    
    # peak of pandemic
    peak_pandemic <- fit[fit$I == max(fit$I), c("Date", "I")]
    
    # severe cases
    max_infected <- max(fit$I)
    severe_cases <- max_infected * 0.2
    
    # cases with need for intensive care
    intensive_care <- max_infected * 0.06
    
    # deaths with supposed 4.5% fatality rate
    deaths <- max_infected * 0.045
    
    # date finish infeced
    date_finish_infeced <- fitted_cumulative_incidence %>% filter(I > 1) %>% summarise(Date = max(Date))
    
    
    # Plots ---------------------------------------------------------------------------------------------------------------------
    
    output$plot1 <- renderPlot({
        fitted_cumulative_incidence %>%
            ggplot(aes(x = Date)) +
            geom_line(aes(y = I), colour = "red") +
            geom_point(aes(y = cumulative_incident_cases), colour = "blue") +
            labs(
                y = "Cumulative incidence",
                title = paste("COVID-19 fitted vs observed cumulative incidence,", "Colombia"),
                subtitle = "(Red = fitted from SIR model, blue = observed)"
            ) +
            theme_minimal()
        #plotly::ggplotly(p1)
    })
    output$plot2 <- renderPlot({
        fitted_cumulative_incidence %>% filter(I > 1) %>% 
            ggplot(aes(x = Date)) +
            geom_line(aes(y = I), colour = "red") +
            geom_point(aes(y = cumulative_incident_cases), colour = "blue") +
            labs(
                y = "Cumulative incidence",
                title = paste("COVID-19 fitted vs observed cumulative incidence,", "Colombia"),
                subtitle = "(Red = fitted from SIR model, blue = observed)"
            ) +
            theme_minimal() +
            scale_y_log10(labels = scales::comma)
        #plotly::ggplotly(p2)
    })
    output$plot3 <- renderPlot({
        fitted_cumulative_incidence %>% filter(I > 1) %>% 
            ggplot(aes(x = Date)) +
            geom_line(aes(y = I), colour = "red") +
            geom_line(aes(y = S), colour = "black") +
            geom_line(aes(y = R), colour = "green") +
            geom_point(aes(y = cumulative_incident_cases),
                       colour = "blue"
            ) +
            scale_y_continuous(labels = scales::comma) +
            labs(y = "Persons", title = paste("COVID-19 fitted vs observed cumulative incidence,","Colombia")) +
            scale_colour_manual(name = "", values = c(
                red = "red", black = "black",
                green = "green", blue = "blue"
            ), labels = c(
                "Susceptible",
                "Recovered", "Observed", "Infectious"
            )) +
            theme_minimal()
        #plotly::ggplotly(p3)
    })
    output$plot4 <- renderPlot({
        fitted_cumulative_incidence %>% filter(I > 1) %>% 
            ggplot(aes(x = Date)) +
            geom_line(aes(y = I, colour = "red")) +
            geom_line(aes(y = S, colour = "black")) +
            geom_line(aes(y = R, colour = "green")) +
            geom_point(aes(y = cumulative_incident_cases, colour = "blue")) +
            scale_y_log10(labels = scales::comma) +
            labs(
                y = "Persons",
                title = paste("COVID-19 fitted vs observed cumulative incidence,", "Colombia"),
                subtitle = "Creador: Sergio A.M. Website: https://rpubs.com/sergiomora123"
            ) +
            scale_colour_manual(
                name = "",
                values = c(red = "red", black = "black", green = "green", blue = "blue"),
                labels = c("Susceptible", "Observed", "Recovered", "Infectious")
            ) +
            theme_minimal()
        #plotly::ggplotly(p4)
    })
    
    
    # Box -----------------------------------------------------------------------------------------------------------------------
    
    output$R0_box <- renderText({paste("R0 = ", round(R0, digits = 2))})
    output$ask2 <- renderValueBox({
        valueBox(
            paste0(as.Date(peak_pandemic[[1]], format = "%Y-%m-%d"), "\n",
                   "Infected:",prettyNum(peak_pandemic[2], big.mark = ","), "\n"), "Peak of pandemic", icon = icon("viruses"), color = "yellow"
        )
    })    
    output$ask3 <- renderValueBox({
        valueBox(
            prettyNum(round(severe_cases), big.mark = ","), "Severe cases", icon = icon("viruses"), color = "yellow"
        )
    })    
    output$ask4 <- renderValueBox({
        valueBox(
            prettyNum(round(intensive_care), big.mark = ","), "Intensive Care", icon = icon("viruses"), color = "yellow"
        )
    })    
    output$ask5 <- renderValueBox({
        valueBox(
            prettyNum(round(deaths), big.mark = ","), "Deaths with 4.5% fatality rate", icon = icon("viruses"), color = "yellow"
        )
    })    
    output$ask6 <- renderValueBox({
        valueBox(
            as.Date(date_finish_infeced[[1]], format = "%Y-%m-%d"), "date Finish Pandemic", icon = icon("viruses"), color = "yellow"
        )
    })    
    

    
    observeEvent(input$run_SIR, {
        output$selected_country <- renderText(paste("you select: ", "'",input$country,"'"))
    # SIR model -----------------------------------------------------------------------------------------------------------------
    
    df <- coronavirus %>%
        filter(country == input$country) %>%
        group_by(date, type) %>%
        summarise(total = sum(cases, na.rm = TRUE)) %>%
        pivot_wider(
            names_from = type,
            values_from = total
        ) %>%
        arrange(date) %>%
        ungroup() %>%
        mutate(active = confirmed - death - recovered) %>%
        mutate(
            confirmed_cum = cumsum(confirmed),
            death_cum = cumsum(death),
            recovered_cum = cumsum(recovered),
            active_cum = cumsum(active)
        )
    print(df)
    cat("\n")
    sir_start_date <- df %>% filter(active_cum >= 1) %>% select(date) %>% summarise(date = min(date)) %>% {.[[1]]}
    cat("sir_start_date",sir_start_date, "\n")
    sir_end_date <- df %>% filter(active_cum >= 1) %>% select(date) %>% summarise(date = max(date)) %>% {.[[1]]}
    cat("sir_end_date",sir_end_date,"\n")
    
    Infected <- subset(df, date >= ymd(sir_start_date) & date <= ymd(sir_end_date))$active_cum
    print(Infected)
    Day <- 1:(length(Infected))
    print(Day)
    
    N <- population_country(input$country)
    cat("N", N, "\n")
    init <- c(
        S = N - Infected[1],
        I = Infected[1],
        R = 0
    )
    print(init)
    
    Opt <- optim(c(0.5, 0.5),
                 RSS,
                 method = "L-BFGS-B",
                 lower = c(0, 0),
                 upper = c(1, 1)
    )
    
    cat("Opt$message",Opt$message, "\n")
    
    Opt_par <- setNames(Opt$par, c("beta", "gamma"))
    cat("Optimal parameters:",Opt_par, "\n")
    
        # Predict -------------------------------------------------------------------------------------------------------------------
    
    t <- 1:as.integer(ymd(sir_end_date) + 1 - ymd(sir_start_date))
    fitted_cumulative_incidence <- data.frame(ode(
        y = init, times = t,
        func = SIR, parms = Opt_par
    ))
    print(fitted_cumulative_incidence)
    fitted_cumulative_incidence <- fitted_cumulative_incidence %>%
        mutate(
            Date = ymd(sir_start_date) + days(t - 1),
            Country = input$country,
            cumulative_incident_cases = Infected
        )
    print(fitted_cumulative_incidence)
        # Reproduction number  ------------------------------------------------------------------------------------------------------
    
    cat("Optimal parameters =", Opt_par, "\n")
    R0 <- as.numeric(Opt_par[1] / Opt_par[2])
    cat("Reproduction number",R0, "\n")
    
        # Using our model to analyze the outbreak if there was no intervention ------------------------------------------------------
    
    # time in days for predictions
    t <- 1:400
    
    # get the fitted values from our SIR model
    fitted_cumulative_incidence <- data.frame(ode(
        y = init, times = t,
        func = SIR, parms = Opt_par
    ))
    
    # add a Date column and join the observed incidence data
    fitted_cumulative_incidence <- fitted_cumulative_incidence %>%
        mutate(
            Date = ymd(sir_start_date) + days(t - 1),
            Country = input$country,
            cumulative_incident_cases = c(Infected, rep(NA, length(t) - length(Infected)))
        )
    
    
    
        # More summary statistics ---------------------------------------------------------------------------------------------------
    
    fit <- fitted_cumulative_incidence
    
    # peak of pandemic
    peak_pandemic <- fit[fit$I == max(fit$I), c("Date", "I")]
    cat("peak of pandemic", peak_pandemic[[1]], "cases:", peak_pandemic[[2]], "\n")
    
    # severe cases
    max_infected <- max(fit$I)
    severe_cases <- max_infected * 0.2
    cat("severe cases", severe_cases, "\n")
    
    # cases with need for intensive care
    intensive_care <- max_infected * 0.06
    cat("cases with need for intensive care", intensive_care, "\n")
    
    # deaths with supposed 4.5% fatality rate
    deaths <- max_infected * 0.045
    cat("deaths with supposed 4.5% fatality rate", deaths, "\n")
    
    # date finish infeced
    date_finish_infeced <- fitted_cumulative_incidence %>% filter(I > 1) %>% summarise(Date = max(Date))
    cat("date finish infeced", date_finish_infeced[[1]], "\n")

    # Plots ---------------------------------------------------------------------------------------------------------------------

    output$plot1 <- renderPlot({
        fitted_cumulative_incidence %>%
            ggplot(aes(x = Date)) +
            geom_line(aes(y = I), colour = "red") +
            geom_point(aes(y = cumulative_incident_cases), colour = "blue") +
            labs(
                y = "Cumulative incidence",
                title = paste("COVID-19 fitted vs observed cumulative incidence,", input$country),
                subtitle = "(Red = fitted from SIR model, blue = observed)"
            ) +
            theme_minimal()
        #plotly::ggplotly(p1)
    })
    output$plot2 <- renderPlot({
        fitted_cumulative_incidence %>% filter(I > 1) %>% 
            ggplot(aes(x = Date)) +
            geom_line(aes(y = I), colour = "red") +
            geom_point(aes(y = cumulative_incident_cases), colour = "blue") +
            labs(
                y = "Cumulative incidence",
                title = paste("COVID-19 fitted vs observed cumulative incidence,", input$country),
                subtitle = "(Red = fitted from SIR model, blue = observed)"
            ) +
            theme_minimal() +
            scale_y_log10(labels = scales::comma)
        #plotly::ggplotly(p2)
    })
    output$plot3 <- renderPlot({
        fitted_cumulative_incidence %>% filter(I > 1) %>% 
            ggplot(aes(x = Date)) +
            geom_line(aes(y = I), colour = "red") +
            geom_line(aes(y = S), colour = "black") +
            geom_line(aes(y = R), colour = "green") +
            geom_point(aes(y = cumulative_incident_cases),
                       colour = "blue"
            ) +
            scale_y_continuous(labels = scales::comma) +
            labs(y = "Persons", title = paste("COVID-19 fitted vs observed cumulative incidence,",input$country)) +
            scale_colour_manual(name = "", values = c(
                red = "red", black = "black",
                green = "green", blue = "blue"
            ), labels = c(
                "Susceptible",
                "Recovered", "Observed", "Infectious"
            )) +
            theme_minimal()
        #plotly::ggplotly(p3)
    })
    output$plot4 <- renderPlot({
        fitted_cumulative_incidence %>% filter(I > 1) %>% 
            ggplot(aes(x = Date)) +
            geom_line(aes(y = I, colour = "red")) +
            geom_line(aes(y = S, colour = "black")) +
            geom_line(aes(y = R, colour = "green")) +
            geom_point(aes(y = cumulative_incident_cases, colour = "blue")) +
            scale_y_log10(labels = scales::comma) +
            labs(
                y = "Persons",
                title = paste("COVID-19 fitted vs observed cumulative incidence,", input$country),
                subtitle = "Creador: Sergio A.M. Website: https://rpubs.com/sergiomora123"
            ) +
            scale_colour_manual(
                name = "",
                values = c(red = "red", black = "black", green = "green", blue = "blue"),
                labels = c("Susceptible", "Observed", "Recovered", "Infectious")
            ) +
            theme_minimal()
        #plotly::ggplotly(p4)
    })
    

    # Box -----------------------------------------------------------------------------------------------------------------------

    output$ask1 <- renderValueBox({
        valueBox(
            paste0("R0 = ", round(R0, digits = 2)), "Reproduction Number", icon = icon("viruses"), color = "yellow"
        )
    })        
    output$ask2 <- renderValueBox({
        valueBox(
            paste0(as.Date(peak_pandemic[[1]], format = "%Y-%m-%d"), "\n",
                   "Infected:",prettyNum(peak_pandemic[2], big.mark = ","), "\n"), "Peak of pandemic", icon = icon("viruses"), color = "yellow"
        )
    })    
    output$ask3 <- renderValueBox({
        valueBox(
            prettyNum(round(severe_cases), big.mark = ","), "Severe cases", icon = icon("viruses"), color = "yellow"
        )
    })    
    output$ask4 <- renderValueBox({
        valueBox(
            prettyNum(round(intensive_care), big.mark = ","), "Intensive Care", icon = icon("viruses"), color = "yellow"
        )
    })    
    output$ask5 <- renderValueBox({
        valueBox(
                 prettyNum(round(deaths), big.mark = ","), "Deaths with 4.5% fatality rate", icon = icon("viruses"), color = "yellow"
        )
    })    
    output$ask6 <- renderValueBox({
        valueBox(
            as.Date(date_finish_infeced[[1]], format = "%Y-%m-%d"), "date Finish Pandemic", icon = icon("viruses"), color = "yellow"
        )
    })    
    })
}

# Run the application 
shinyApp(ui = ui, server = server)
